"""
Django settings for bpglg_project project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DJANGO_DEBUG',0))

#Django Log Level
DJANGO_LOG_LEVEL = os.environ.get('DJANGO_LOG_LEVEL','INFO')

ALLOWED_HOSTS = ([os.environ['WEBSITE_HOSTNAME']] if 'WEBSITE_HOSTNAME' in os.environ else []) + ['.usps.com','.azurewebsites.net']
CSRF_TRUSTED_ORIGINS = ['https://*.usps.com','https://*.azurewebsites.net','https://*.127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', 
    'django.contrib.staticfiles',
    'bpglg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Add whitenoise middleware after the security middleware                             
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bpglg_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bpglg_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

#Adding Whitenoise Compression to handle static files
STATICFILES_STORAGE = ('whitenoise.storage.CompressedStaticFilesStorage')

STATIC_URL = os.environ.get('DJANGO_STATIC_URL',"/static/")
STATICFILES_DIRS = [os.path.join(BASE_DIR,'bpglg/static')]
STATIC_ROOT = os.path.join (BASE_DIR, os.environ.get('DJANGO_STATIC_ROOT',"static"))

# Set Environment Name
ENVIRONMENT = os.environ.get('BPG_ENVIRONMENT')

#Set Tenant ID
AZURE_TENANT_ID = os.environ.get('AZURE_TENANT_ID');

#Set Client ID
AZURE_CLIENT_ID = os.environ.get('AZURE_CLIENT_ID');

#Set Client Secret
AZURE_CLIENT_SECRET = os.environ.get('AZURE_CLIENT_SECRET');

#Set Azure From Email ID
AZURE_EMAIL_FROM_ADDRESS = os.environ.get('AZURE_EMAIL_FROM_ADDRESS');

#Set Azure Email Access Key
AZURE_EMAIL_ACCESS_KEY = os.environ.get('AZURE_EMAIL_ACCESS_KEY');

#Set Azure Email Endpoint
AZURE_EMAIL_ENDPOINT = os.environ.get('AZURE_EMAIL_ENDPOINT');

#Website Host Name
WEBSITE_URL = os.environ.get('WEBSITE_URL','https://bpg-dev-rg.azurewebsites.net/')

# CLS API Call related variables
CLS_HOST_NAME = os.environ.get('CLS_HOST_NAME')
CLS_API_KEY = os.environ.get('CLS_API_KEY')
CLS_VERIFY = os.environ.get('CLS_VERIFY')